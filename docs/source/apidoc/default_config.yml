seed: 12345
work_dir: ${hydra:runtime.cwd}
debug: false
print_config: true
ignore_warnings: true
trainer:
  _target_: pytorch_lightning.Trainer
  gpus: 0
  min_epochs: 40
  max_epochs: 40
  log_every_n_steps: 1
  check_val_every_n_epoch: 1
  weights_summary: null
  progress_bar_refresh_rate: 1
  auto_lr_find: false
  overfit_batches: 1
  num_sanity_val_steps: 0
datamodule:
  dataset_description:
    _convert_: all
    classification_preprocessing_dict:
      59: 6
      50: 1
    classification_dict:
      1: unclassified
      2: ground
      6: building
    d_in: 12
    num_classes: 3
    load_las_func:
      _target_: functools.partial
      _args_:
      - ${get_method:myria3d.data.loading.FrenchLidarDataLogic.load_las}
  transforms:
    preparations:
      ToTensor:
        _target_: myria3d.data.transforms.ToTensor
      TargetTransform:
        _target_: myria3d.data.transforms.TargetTransform
        _args_:
        - ${datamodule.dataset_description.classification_preprocessing_dict}
        - ${datamodule.dataset_description.classification_dict}
      GridSampling:
        _target_: torch_geometric.transforms.GridSampling
        _args_:
        - 0.25
      FixedPoints:
        _target_: torch_geometric.transforms.FixedPoints
        _args_:
        - 12500
        replace: false
        allow_duplicates: true
      Center:
        _target_: torch_geometric.transforms.Center
    augmentations:
      x_flip:
        _target_: torch_geometric.transforms.RandomFlip
        _args_:
        - 0
        p: 0.5
      y_flip:
        _target_: torch_geometric.transforms.RandomFlip
        _args_:
        - 1
        p: 0.5
    normalizations:
      NormalizePos:
        _target_: myria3d.data.transforms.NormalizePos
      StandardizeFeatures:
        _target_: myria3d.data.transforms.StandardizeFeatures
    augmentations_list: '${oc.dict.values: datamodule.transforms.augmentations}'
    preparations_list: '${oc.dict.values: datamodule.transforms.preparations}'
    normalizations_list: '${oc.dict.values: datamodule.transforms.normalizations}'
  _target_: myria3d.data.datamodule.DataModule
  prepared_data_dir: ${oc.env:PREPARED_DATA_DIR}
  test_data_dir: ${datamodule.prepared_data_dir}/test/
  batch_size: 16
  prefetch_factor: 2
  num_workers: 1
  subtile_width_meters: 50
  subtile_overlap: ${predict.subtile_overlap}
  subsample_size: 12500
callbacks:
  log_code:
    _target_: myria3d.callbacks.comet_callbacks.LogCode
    code_dir: ${work_dir}/myria3d
  log_logs_dir:
    _target_: myria3d.callbacks.comet_callbacks.LogLogsPath
  lr_monitor:
    _target_: pytorch_lightning.callbacks.LearningRateMonitor
    logging_interval: step
    log_momentum: true
  log_iou_by_class:
    _target_: myria3d.callbacks.logging_callbacks.LogIoUByClass
    classification_dict: ${datamodule.dataset_description.classification_dict}
    interpolator:
      _target_: myria3d.models.interpolation.Interpolator
      interpolation_k: ${predict.interpolation_k}
      classification_dict: ${datamodule.dataset_description.classification_dict}
      probas_to_save: ${predict.probas_to_save}
  model_checkpoint:
    _target_: pytorch_lightning.callbacks.ModelCheckpoint
    monitor: val/loss_epoch
    mode: min
    save_top_k: 1
    save_last: true
    verbose: true
    dirpath: checkpoints/
    filename: epoch_{epoch:03d}
    auto_insert_metric_name: false
  early_stopping:
    _target_: pytorch_lightning.callbacks.EarlyStopping
    monitor: val/loss_epoch
    mode: min
    patience: 6
    min_delta: 0
model:
  optimizer:
    _target_: functools.partial
    _args_:
    - ${get_method:torch.optim.Adam}
    lr: ${model.lr}
  lr_scheduler:
    _target_: functools.partial
    _args_:
    - ${get_method:torch.optim.lr_scheduler.ReduceLROnPlateau}
    mode: min
    factor: 0.5
    patience: 5
    cooldown: 0
    verbose: true
  _target_: myria3d.models.model.Model
  d_in: ${datamodule.dataset_description.d_in}
  num_classes: ${datamodule.dataset_description.num_classes}
  ckpt_path: null
  neural_net_class_name: RandLANet
  neural_net_hparams:
    num_classes: ${model.num_classes}
    d_in: ${model.d_in}
    num_neighbors: 16
    decimation: 4
    dropout: 0.5
  iou:
    _target_: functools.partial
    _args_:
    - ${get_method:torchmetrics.JaccardIndex}
    - ${model.num_classes}
    absent_score: 1.0
  criterion:
    _target_: torch.nn.CrossEntropyLoss
    label_smoothing: 0.0
  momentum: 0.9
  monitor: val/loss_epoch
  lr: 0.004566395347136576
logger:
  comet:
    _target_: pytorch_lightning.loggers.comet.CometLogger
    api_key: ${oc.env:COMET_API_TOKEN}
    workspace: ${oc.env:COMET_WORKSPACE}
    project_name: ${oc.env:COMET_PROJECT_NAME}
    experiment_name: RandLaNetDebug
    auto_log_co2: false
    disabled: false
task:
  task_name: fit
predict:
  src_las: /path/to/input.las
  output_dir: /path/to/output_dir/
  ckpt_path: /path/to/lightning_model.ckpt
  gpus: 0
  probas_to_save: all
  subtile_overlap: 0
  interpolation_k: 10
